#include <U8g2lib.h>
#include "Animation.h"
#include "Distracter.h"
#include <EEPROM.h>
#define WiFi_Logo_width 60
#define WiFi_Logo_height 36



const uint8_t background[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0C, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF2, 0xCF, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x48, 0x90, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x12, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x12, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x12, 0x48, 0x90, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 
  0x12, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xF8, 0xFF, 0x84, 0x13, 0x48, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xC3, 0xF2, 0xCF, 0x9F, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xBF, 
  0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0x80, 0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x02, 0x00, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 
  0xF2, 0x0F, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x20, 0x12, 0x08, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x12, 0x08, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xF3, 0x27, 
  0x12, 0x08, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x09, 0x12, 0x24, 0x12, 0x08, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x24, 0x12, 0x08, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x24, 
  0x12, 0x08, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x09, 0x12, 0x24, 0x12, 0x08, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x24, 0xF2, 0x0F, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x24, 
  0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x09, 0x12, 0x24, 0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xF3, 0x27, 0x02, 0x00, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 
  0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x20, 0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0xF2, 0xE2, 0x95, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 
  0x92, 0x22, 0x95, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x00, 0x20, 0xF2, 0x22, 0x9D, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x27, 0x12, 0xE2, 0x91, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 
  0x12, 0x2E, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x20, 0x24, 0x02, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 0x02, 0x00, 0x80, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 
  0xE2, 0xFF, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x20, 0x24, 0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 0x22, 0x10, 0x90, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 
  0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x20, 0x25, 0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 0x22, 0xD6, 0x90, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 
  0x22, 0xD6, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x20, 0x24, 0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 0x22, 0x10, 0x90, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x27, 
  0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xE0, 0x27, 0x22, 0x10, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0xFF, 0x08, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, };


const uint8_t bird[] PROGMEM = {
  0xE0, 0x07, 0xAE, 0x08, 0x91, 0x0A, 0x91, 0x08, 0x21, 0x0F, 0x3E, 0x3C, 
  0x04, 0x3C, 0x08, 0x02, 0xF0, 0x01, };

static const unsigned char happyFace[] U8X8_PROGMEM = {0x00,0x00,0x00,0x00,0x3c,0x00,0x80,0x07,0x5e,0x00,0xc0,0x0b,0x7e,0x00,0xc0,0x0f,0x7e,0x00,0xc0,0x0f,0x7e,0x00,0xc0,0x0f,0x3c,0x00,0x80,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x00,0x00,0x08,0x02,0x00,0x00,0x08,0x02,0x00,0x00,0x10,0x01,0x00,0x00,0xe0,0x00,0x00};
static const unsigned char lskTrademark[] U8X8_PROGMEM = {0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xf8,0x03,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xfc,0x03,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xfc,0x03,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xfe,0x01,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xbf,0xff,0x00,0x00,0x00,0x00,0x00,0xe8,0x80,0xff,0x7f,0x00,0xbc,0x00,0x00,0x00,0xfc,0x83,0xff,0x3f,0x40,0xff,0x01,0x00,0x00,0xfe,0x83,0xff,0x3f,0x40,0xff,0x03,0x00,0x80,0xff,0x87,0xff,0x1f,0x60,0xfe,0x07,0x00,0x80,0xff,0x87,0xff,0x1f,0x70,0xfe,0x0f,0x00,0xc0,0xff,0x8f,0xff,0x3f,0x70,0xfc,0x0f,0x00,0xe0,0xff,0x8f,0xff,0x7f,0x7c,0xfc,0x0f,0x00,0xf0,0xff,0x8f,0xff,0xff,0x7f,0xfc,0x0f,0x00,0xf0,0x7f,0x8f,0xff,0xff,0x7f,0xf8,0x0f,0x00,0xf8,0x1f,0x8c,0xff,0xff,0x7f,0xf8,0x0f,0x00,0xf8,0x0f,0x80,0xff,0xff,0x7f,0xf8,0x1f,0x00,0xf8,0x0f,0x80,0x7f,0xff,0x7f,0xf8,0x1f,0x00,0xfc,0x07,0x80,0x7f,0xff,0x3f,0xf8,0x1f,0x00,0xfc,0xdf,0x8f,0x7f,0xfe,0x3f,0xf8,0x1f,0x00,0xfc,0xff,0xbf,0x7f,0xfc,0x1f,0xf8,0x1f,0x00,0xfc,0xff,0xbf,0x7f,0xf0,0x0f,0xf8,0x1f,0x00,0xf8,0xff,0x7f,0xff,0xe0,0x07,0xf8,0x1f,0x00,0xf8,0xff,0xff,0xff,0x00,0x01,0xf0,0x1f,0x00,0xf8,0xff,0x7f,0xff,0x00,0x00,0xf8,0x1f,0x00,0xe0,0x17,0xff,0xff,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x7f,0xff,0x00,0x00,0xf0,0x1f,0x00,0x00,0x80,0x7f,0xfe,0x00,0x00,0xf0,0x1f,0x00,0x18,0xe0,0x7f,0x7c,0x00,0x00,0xf0,0x1f,0x00,0xf8,0xfa,0x3f,0x00,0x00,0x00,0xf0,0x1f,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0xf0,0x1f,0x00,0xfc,0xff,0x1f,0x00,0x00,0x00,0xf0,0x1f,0x00,0xfc,0xff,0x0f,0x00,0x00,0x00,0xf0,0x3f,0xf8,0xf9,0xff,0x07,0x00,0x00,0x00,0xf0,0x1f,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xf0,0xbf,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0xbf,0x02,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x2f,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00};


#define MAIN_MENU_SCREEN 0
#define GAMEPLAY_SCREEN 1
#define GAMEOVER_SCREEN 2

#define BIRD_WIDTH 14
#define BIRD_HEIGHT 9

// Initialize the U8g2 library for SH1106 (assuming the same I2C pins D1 and D2)
U8G2_SSD1306_128X64_NONAME_F_HW_I2C display(U8G2_R0, U8X8_PIN_NONE);

float wall[4];
int empty[4];
int space = 32;
int widthOfPassage = 30;

int gameState = MAIN_MENU_SCREEN;

const int TOUCH_SENSOR_PIN = 2;
int buttonState = 0;

int score = 0;
int isJumping = 0;
int currentTime = 0;
int direction = 1;
int play = 0;

float birdX = 5.00;
float birdY = 22.00;

unsigned long ton = 0;

Animation animation;
Distracter distracter;


bool isDistractionIsForced = false;
bool isDonWant = false;
bool isAlreadyInDistraction = false;


bool isWantToPlaygame = true;

void setup() {
  Serial.begin(9600);
  display.begin();
  pinMode(TOUCH_SENSOR_PIN, INPUT);
  generateWalls();

  bool storedBool = EEPROM.read(0);

  if (storedBool == false) {
    isWantToPlaygame = false;
    EEPROM.write(0, true);
  } else {
    isWantToPlaygame = true;
    EEPROM.write(0, false);
  }

  // digitalWrite(TOUCH_SENSOR_PIN, LOW);
}

void loop() {
  display.clearBuffer();  // Clear display buffer
  
  buttonState = digitalRead(TOUCH_SENSOR_PIN);
  
  if (isWantToPlaygame) {
    flappyFlappy();
    EEPROM.write(0, false);
  } else {
    displayGreetings(buttonState == HIGH ? true : false);
    EEPROM.write(0, true);
  }

  if (animation.isHalfAnimationCompeleted()) {
    isWantToPlaygame = true;
  }

  if (!animation._isAnimationIsCompelete()) {
    animation.display(display);
    animation.update();
  }

  display.sendBuffer();  // Send the display buffer to the screen
}

void displayGreetings(int isColorInverted) {
  display.setFontMode(1);

  if (!isColorInverted) {
    isDistractionIsForced = false;
    isDonWant = true;
    isAlreadyInDistraction = false;
    animation.stopAnimation();
    animation.reset();
  } else {
    isDistractionIsForced = true;
    
    isDonWant = false;
    if (!isAlreadyInDistraction) {
      animation.startAnimation();
    }

    isAlreadyInDistraction = true;
  }

  distracter.display(display);
  distracter.update(isDistractionIsForced);

  animation.display(display);
  animation.update();



  display.setBitmapMode(1);
  display.drawXBMP(95, 46, 29, 14, happyFace);
  display.drawXBMP(28, 2, 71, 61, lskTrademark);
}

void flappyFlappy() {
  if (gameState == MAIN_MENU_SCREEN) {
    // Serial.println("MAIN_MENU_SCREEN");
    showMainMenuScreen();
  } else if (gameState == GAMEPLAY_SCREEN) {
    showGamePlayScreen();
    // Serial.println("GAMEPLAY_SCREEN");
  } else if (gameState == GAMEOVER_SCREEN) {
    showGameOverScreen();
    // Serial.println("GAMEOVER_SCREEN");
  }
}

void showMainMenuScreen() {
  display.setFont(u8g2_font_helvR10_tf);  // Use a U8g2 font
  // display.drawStr(0, 16, "Flappy ");
  display.drawXBMP(0, 0, 128, 64, background);  // Draw the background XBM
  drawBird(20, 15);

  display.setFont(u8g2_font_helvR08_tf);  // Smaller font for instructions
  display.drawStr(0, 44, "Press to start");

  if (buttonState == HIGH && animation._isAnimationIsCompelete()) {
    gameState = GAMEPLAY_SCREEN;
  }
}

void showGamePlayScreen() {
  int val = 10;

  display.setFont(u8g2_font_helvR08_tf);
  // display.drawStr(3, 10, String(score).c_str());
  display.setCursor(3, 10);
  display.println(score);

  if (buttonState == HIGH) {
    if (isJumping == 0) {
      currentTime = millis();
      ton = millis();
      direction = 1;
      play = 1;
      isJumping = 1;
    }
  } else {
    isJumping = 0;
  }

  for (int i = 0; i < 4; i++) {
    // Draw the wall
    display.drawBox(wall[i], 0, 6, 64);
    display.setDrawColor(0);  // Set draw color to black to draw the empty passage
    display.drawBox(wall[i], empty[i], 6, widthOfPassage);
    display.setDrawColor(1);  // Reset draw color to white

    // Move the wall and check if need to move the position of the wall
    wall[i] -= 1;

    if (wall[i] < 0) {
      score = score + 1;
      empty[i] = random(8, 32);
      wall[i] = 128 + 5;
    }

    // Check for collision
    if (wall[i] <= birdX + 7 && birdX + 7 <= wall[i] + 6) {
      if (birdY < empty[i] || birdY + BIRD_HEIGHT > empty[i] + widthOfPassage) {
        gameOver();
      }
    }
  }

  drawBird(birdX, birdY);

  if ((currentTime + 185) < millis()) {
    direction = 0;
  }

  if ((ton + 40) < millis()) {
    play = 0;
  }

  if (direction == 0) {
    birdY += 1;
  } else {
    birdY -= 2;
  }

  if (birdY >= 64 || birdY < -3) {  // Check if the bird collided with the upper or lower bounds
    gameOver();
  }

  display.drawFrame(0, 0, 128, 64);
}

void showGameOverScreen() {
  display.setFont(u8g2_font_helvR10_tf);
  display.drawStr(0, 16, "Score: ");
  display.drawXBMP(0, 0, 128, 64, background);
  display.setCursor(20, 35);
  display.println(score);

  display.setFont(u8g2_font_helvR08_tf);
  display.drawStr(0, 44, "Press to start");

  if (buttonState == HIGH) {
    score = 0;
    gameState = GAMEPLAY_SCREEN;
    buttonState = LOW;
  }
}

void drawBird(int x, int y) {
  display.drawXBMP(x, y, BIRD_WIDTH, BIRD_HEIGHT, bird);  // Draw the bird XBM
}

void gameOver() {
  gameState = GAMEOVER_SCREEN;
  birdY = 22;
  delay(500);
  generateWalls();
}

void generateWalls() {
  for (int i = 0; i < 4; i++) {
    wall[i] = 128 + ((i + 1) * space);
    empty[i] = random(8, 32);
  }
}
